	component board is
		port (
			avmm_r_slave_waitrequest   : out std_logic;                                         -- waitrequest
			avmm_r_slave_readdata      : out std_logic_vector(511 downto 0);                    -- readdata
			avmm_r_slave_readdatavalid : out std_logic;                                         -- readdatavalid
			avmm_r_slave_burstcount    : in  std_logic_vector(4 downto 0)   := (others => 'X'); -- burstcount
			avmm_r_slave_writedata     : in  std_logic_vector(511 downto 0) := (others => 'X'); -- writedata
			avmm_r_slave_address       : in  std_logic_vector(63 downto 0)  := (others => 'X'); -- address
			avmm_r_slave_write         : in  std_logic                      := 'X';             -- write
			avmm_r_slave_read          : in  std_logic                      := 'X';             -- read
			avmm_r_slave_byteenable    : in  std_logic_vector(63 downto 0)  := (others => 'X'); -- byteenable
			avmm_r_slave_debugaccess   : in  std_logic                      := 'X';             -- debugaccess
			avmm_w_slave_waitrequest   : out std_logic;                                         -- waitrequest
			avmm_w_slave_readdata      : out std_logic_vector(511 downto 0);                    -- readdata
			avmm_w_slave_readdatavalid : out std_logic;                                         -- readdatavalid
			avmm_w_slave_burstcount    : in  std_logic_vector(4 downto 0)   := (others => 'X'); -- burstcount
			avmm_w_slave_writedata     : in  std_logic_vector(511 downto 0) := (others => 'X'); -- writedata
			avmm_w_slave_address       : in  std_logic_vector(63 downto 0)  := (others => 'X'); -- address
			avmm_w_slave_write         : in  std_logic                      := 'X';             -- write
			avmm_w_slave_read          : in  std_logic                      := 'X';             -- read
			avmm_w_slave_byteenable    : in  std_logic_vector(63 downto 0)  := (others => 'X'); -- byteenable
			avmm_w_slave_debugaccess   : in  std_logic                      := 'X';             -- debugaccess
			bridge_reset_reset         : in  std_logic                      := 'X';             -- reset
			ci0_InitDone               : in  std_logic                      := 'X';             -- InitDone
			ci0_virtual_access         : in  std_logic                      := 'X';             -- virtual_access
			ci0_tx_c0_almostfull       : in  std_logic                      := 'X';             -- tx_c0_almostfull
			ci0_rx_c0_header           : in  std_logic_vector(27 downto 0)  := (others => 'X'); -- rx_c0_header
			ci0_rx_c0_data             : in  std_logic_vector(511 downto 0) := (others => 'X'); -- rx_c0_data
			ci0_rx_c0_wrvalid          : in  std_logic                      := 'X';             -- rx_c0_wrvalid
			ci0_rx_c0_rdvalid          : in  std_logic                      := 'X';             -- rx_c0_rdvalid
			ci0_rx_c0_ugvalid          : in  std_logic                      := 'X';             -- rx_c0_ugvalid
			ci0_rx_c0_mmiordvalid      : in  std_logic                      := 'X';             -- rx_c0_mmiordvalid
			ci0_rx_c0_mmiowrvalid      : in  std_logic                      := 'X';             -- rx_c0_mmiowrvalid
			ci0_tx_c1_almostfull       : in  std_logic                      := 'X';             -- tx_c1_almostfull
			ci0_rx_c1_header           : in  std_logic_vector(27 downto 0)  := (others => 'X'); -- rx_c1_header
			ci0_rx_c1_wrvalid          : in  std_logic                      := 'X';             -- rx_c1_wrvalid
			ci0_rx_c1_irvalid          : in  std_logic                      := 'X';             -- rx_c1_irvalid
			ci0_tx_c0_header           : out std_logic_vector(98 downto 0);                     -- tx_c0_header
			ci0_tx_c0_rdvalid          : out std_logic;                                         -- tx_c0_rdvalid
			ci0_tx_c1_header           : out std_logic_vector(98 downto 0);                     -- tx_c1_header
			ci0_tx_c1_data             : out std_logic_vector(511 downto 0);                    -- tx_c1_data
			ci0_tx_c1_wrvalid          : out std_logic;                                         -- tx_c1_wrvalid
			ci0_tx_c1_irvalid          : out std_logic;                                         -- tx_c1_irvalid
			ci0_tx_c1_byteen           : out std_logic_vector(63 downto 0);                     -- tx_c1_byteen
			ci0_tx_c2_header           : out std_logic_vector(8 downto 0);                      -- tx_c2_header
			ci0_tx_c2_rdvalid          : out std_logic;                                         -- tx_c2_rdvalid
			ci0_tx_c2_data             : out std_logic_vector(63 downto 0);                     -- tx_c2_data
			ci0_nohazards_rd           : out std_logic;                                         -- nohazards_rd
			ci0_nohazards_wr_full      : out std_logic;                                         -- nohazards_wr_full
			ci0_nohazards_wr_all       : out std_logic;                                         -- nohazards_wr_all
			clk_400_clk                : in  std_logic                      := 'X';             -- clk
			global_reset_reset_n       : in  std_logic                      := 'X';             -- reset_n
			kernel_clk_clk             : out std_logic;                                         -- clk
			kernel_clk_in_clk          : in  std_logic                      := 'X';             -- clk
			kernel_cra_waitrequest     : in  std_logic                      := 'X';             -- waitrequest
			kernel_cra_readdata        : in  std_logic_vector(63 downto 0)  := (others => 'X'); -- readdata
			kernel_cra_readdatavalid   : in  std_logic                      := 'X';             -- readdatavalid
			kernel_cra_burstcount      : out std_logic_vector(0 downto 0);                      -- burstcount
			kernel_cra_writedata       : out std_logic_vector(63 downto 0);                     -- writedata
			kernel_cra_address         : out std_logic_vector(29 downto 0);                     -- address
			kernel_cra_write           : out std_logic;                                         -- write
			kernel_cra_read            : out std_logic;                                         -- read
			kernel_cra_byteenable      : out std_logic_vector(7 downto 0);                      -- byteenable
			kernel_cra_debugaccess     : out std_logic;                                         -- debugaccess
			kernel_irq_irq             : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- irq
			kernel_reset_reset_n       : out std_logic;                                         -- reset_n
			psl_clk_clk                : in  std_logic                      := 'X'              -- clk
		);
	end component board;

